{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Animated = require('./Animated');\n\nvar AnimatedWithChildren = require('./AnimatedWithChildren');\n\nvar AnimatedInterpolation = require('./AnimatedInterpolation');\n\nvar Interpolation = require('./Interpolation');\n\nvar AnimatedModulo = function (_AnimatedWithChildren) {\n  _inherits(AnimatedModulo, _AnimatedWithChildren);\n\n  function AnimatedModulo(a, modulus) {\n    _classCallCheck(this, AnimatedModulo);\n\n    var _this = _possibleConstructorReturn(this, (AnimatedModulo.__proto__ || Object.getPrototypeOf(AnimatedModulo)).call(this));\n\n    _this._a = a;\n    _this._modulus = modulus;\n    _this._listeners = {};\n    return _this;\n  }\n\n  _createClass(AnimatedModulo, [{\n    key: '__getValue',\n    value: function __getValue() {\n      return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;\n    }\n  }, {\n    key: 'addListener',\n    value: function addListener(callback) {\n      var _this2 = this;\n\n      if (!this._aListener) {\n        this._aListener = this._a.addListener(function () {\n          for (var key in _this2._listeners) {\n            _this2._listeners[key]({\n              value: _this2.__getValue()\n            });\n          }\n        });\n      }\n\n      var id = guid();\n      this._listeners[id] = callback;\n      return id;\n    }\n  }, {\n    key: 'removeListener',\n    value: function removeListener(id) {\n      delete this._listeners[id];\n    }\n  }, {\n    key: 'interpolate',\n    value: function interpolate(config) {\n      return new AnimatedInterpolation(this, Interpolation.create(config));\n    }\n  }, {\n    key: '__attach',\n    value: function __attach() {\n      this._a.__addChild(this);\n    }\n  }, {\n    key: '__detach',\n    value: function __detach() {\n      this._a.__removeChild(this);\n    }\n  }]);\n\n  return AnimatedModulo;\n}(AnimatedWithChildren);\n\nmodule.exports = AnimatedModulo;","map":null,"metadata":{},"sourceType":"script"}