{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Animated = require('./Animated');\n\nvar AnimatedWithChildren = require('./AnimatedWithChildren');\n\nvar AnimatedTemplate = function (_AnimatedWithChildren) {\n  _inherits(AnimatedTemplate, _AnimatedWithChildren);\n\n  function AnimatedTemplate(strings, values) {\n    _classCallCheck(this, AnimatedTemplate);\n\n    var _this = _possibleConstructorReturn(this, (AnimatedTemplate.__proto__ || Object.getPrototypeOf(AnimatedTemplate)).call(this));\n\n    _this._strings = strings;\n    _this._values = values;\n    return _this;\n  }\n\n  _createClass(AnimatedTemplate, [{\n    key: '__transformValue',\n    value: function __transformValue(value) {\n      if (value instanceof Animated) {\n        return value.__getValue();\n      } else {\n        return value;\n      }\n    }\n  }, {\n    key: '__getValue',\n    value: function __getValue() {\n      var value = this._strings[0];\n\n      for (var i = 0; i < this._values.length; ++i) {\n        value += this.__transformValue(this._values[i]) + this._strings[1 + i];\n      }\n\n      return value;\n    }\n  }, {\n    key: '__attach',\n    value: function __attach() {\n      for (var i = 0; i < this._values.length; ++i) {\n        if (this._values[i] instanceof Animated) {\n          this._values[i].__addChild(this);\n        }\n      }\n    }\n  }, {\n    key: '__detach',\n    value: function __detach() {\n      for (var i = 0; i < this._values.length; ++i) {\n        if (this._values[i] instanceof Animated) {\n          this._values[i].__removeChild(this);\n        }\n      }\n    }\n  }]);\n\n  return AnimatedTemplate;\n}(AnimatedWithChildren);\n\nmodule.exports = AnimatedTemplate;","map":null,"metadata":{},"sourceType":"script"}