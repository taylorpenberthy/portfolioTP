{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _jsxFileName = 'src/createAnimatedComponent.js';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar React = require('react');\n\nvar AnimatedProps = require('./AnimatedProps');\n\nvar ApplyAnimatedValues = require('./injectable/ApplyAnimatedValues');\n\nfunction createAnimatedComponent(Component) {\n  var refName = 'node';\n\n  var AnimatedComponent = function (_React$Component) {\n    _inherits(AnimatedComponent, _React$Component);\n\n    function AnimatedComponent() {\n      _classCallCheck(this, AnimatedComponent);\n\n      return _possibleConstructorReturn(this, (AnimatedComponent.__proto__ || Object.getPrototypeOf(AnimatedComponent)).apply(this, arguments));\n    }\n\n    _createClass(AnimatedComponent, [{\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        this._propsAnimated && this._propsAnimated.__detach();\n      }\n    }, {\n      key: 'setNativeProps',\n      value: function setNativeProps(props) {\n        var didUpdate = ApplyAnimatedValues.current(this.refs[refName], props, this);\n\n        if (didUpdate === false) {\n          this.forceUpdate();\n        }\n      }\n    }, {\n      key: 'componentWillMount',\n      value: function componentWillMount() {\n        this.attachProps(this.props);\n      }\n    }, {\n      key: 'attachProps',\n      value: function attachProps(nextProps) {\n        var _this2 = this;\n\n        var oldPropsAnimated = this._propsAnimated;\n\n        var callback = function callback() {\n          var didUpdate = ApplyAnimatedValues.current(_this2.refs[refName], _this2._propsAnimated.__getAnimatedValue(), _this2);\n\n          if (didUpdate === false) {\n            _this2.forceUpdate();\n          }\n        };\n\n        this._propsAnimated = new AnimatedProps(nextProps, callback);\n        oldPropsAnimated && oldPropsAnimated.__detach();\n      }\n    }, {\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        this.attachProps(nextProps);\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _propsAnimated$__getV = this._propsAnimated.__getValue(),\n            style = _propsAnimated$__getV.style,\n            other = _objectWithoutProperties(_propsAnimated$__getV, ['style']);\n\n        return React.createElement(Component, _extends({}, other, {\n          style: ApplyAnimatedValues.transformStyles(style),\n          ref: refName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          }\n        }));\n      }\n    }]);\n\n    return AnimatedComponent;\n  }(React.Component);\n\n  AnimatedComponent.propTypes = {\n    style: function style(props, propName, componentName) {\n      if (!Component.propTypes) {\n        return;\n      }\n    }\n  };\n  return AnimatedComponent;\n}\n\nmodule.exports = createAnimatedComponent;","map":null,"metadata":{},"sourceType":"script"}